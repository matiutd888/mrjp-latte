token UIdent (letter (letter | digit | '_')*) ;

-- programs ------------------------------------------------
entrypoints Program ;

ProgramT.   	Program 	::= [TopDef] ;

TopClassDef. 	TopDef 		::= ClassDef;
TopFuncDef.    	TopDef 		::= FuncDef;

FunDefT.	FuncDef         ::= Type UIdent "(" [Arg] ")" Block ;
ArgT. 	   	Arg 		    ::= Type UIdent ;

ClassFieldT.     ClassMember     ::= Type UIdent ";";
ClassMethodT.    ClassMember     ::= FuncDef;

ClassDefT.       ClassDef 	::= "class" UIdent "{" [ClassMember] "}" ;
ClassExtDefT.    ClassDef 	::= "class" UIdent "extends" UIdent "{" [ClassMember] "}" ;

separator Arg "," ;
separator nonempty TopDef "" ;
separator ClassMember "" ;

------------------------------------------

SBlock.     Block 	::= "{" [Stmt] "}" ;

SEmpty.     Stmt 	::= ";" ;

SBStmt.     Stmt 	::= Block ;
SDecl.      Stmt 	::= Type [Item] ";" ;

SNoInit.    Item 	::= UIdent ;
SInit.      Item 	::= UIdent "=" Expr ;

SAss.       Stmt 	::= Expr "=" Expr  ";" ;
SIncr.      Stmt 	::= Expr "++"  ";" ;
SDecr.      Stmt 	::= Expr "--"  ";" ;

SRet.       Stmt 	::= "return" Expr ";" ;
SVRet.      Stmt 	::= "return" ";" ;

SCond.      Stmt 	::= "if" "(" Expr ")" Stmt  ;
SCondElse.  Stmt 	::= "if" "(" Expr ")" Stmt "else" Stmt  ;

SWhile.     Stmt 	::= "while" "(" Expr ")" Stmt ;

SExp.      Stmt 	::= Expr  ";" ;

separator  Stmt "" ;
separator nonempty Item "," ;

-- Types ---------------------------------------------------

TClass.          Type    ::= UIdent ;
TInt.            Type 	 ::= "int" ;
TStr.            Type 	 ::= "string" ;
TBool.           Type 	 ::= "boolean" ;
TVoid.           Type    ::= "void" ;
internal   TFun. Type ::= Type "(" [Type] ")" ;

separator Type "," ;

-- Expressions ---------------------------------------------

ENewObject.	Expr6 	::= "new" Type ;
ESelf. Expr6 ::= "self";

EMember.	 Expr6 	::= Expr6 "." UIdent ;
EMemberCall. Expr6 	::= Expr6 "." UIdent "(" [Expr] ")"  ;



EVar. 		Expr6 	::= UIdent ;
ELitInt. 	Expr6   ::= Integer ;
ELitTrue. 	Expr6   ::= "true" ;
ELitFalse. 	Expr6   ::= "false" ;
EString. 	Expr6   ::= String ;

EApp. 		Expr6   ::= UIdent "(" [Expr] ")" ;

ECastNull. 		Expr5   ::= "(" UIdent ")" "null";

Neg. 		Expr5   ::= "-" Expr6 ;
Not. 		Expr5   ::= "!" Expr6 ;

EMul.           Expr4   ::= Expr4 MulOp Expr5 ;
EAdd.           Expr3   ::= Expr3 AddOp Expr4 ;
ERel.           Expr2   ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;

coercions Expr 6 ;
separator Expr "," ;

-- operators -----------------------------------------------

Plus.   AddOp   ::= "+" ;
Minus.  AddOp   ::= "-" ;
Times.  MulOp   ::= "*" ;
Div.    MulOp   ::= "/" ;
Mod.    MulOp   ::= "%" ;

LTH.	RelOp   ::= "<" ;
LE.	    RelOp   ::= "<=" ;
GTH.	RelOp   ::= ">" ;
GE.	    RelOp   ::= ">=" ;
EQU.	RelOp   ::= "==" ;
NE.	    RelOp   ::= "!=" ;

-- comments ------------------------------------------------

comment "#" ;
comment "//" ;
comment "/*" "*/" ;